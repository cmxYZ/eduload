{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-2380d2d8\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  key: 0,\n  style: {\n    \"display\": \"flex\"\n  },\n  class: \"reg\"\n};\nconst _hoisted_2 = {\n  class: \"table\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_AGGrid = _resolveComponent(\"AGGrid\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [$data.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, \"Загрузка таблицы...\")) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_AGGrid, {\n    gridData: $data.gridData,\n    columnDefs: $data.columnDefs,\n    defaultColDef: $data.defaultColDef,\n    getRowId: _ctx.getRowId,\n    localeText: _ctx.ruLocale\n  }, null, 8 /* PROPS */, [\"gridData\", \"columnDefs\", \"defaultColDef\", \"getRowId\", \"localeText\"])])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["style","class","$data","isLoading","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createVNode","_component_AGGrid","gridData","columnDefs","defaultColDef","getRowId","_ctx","localeText","ruLocale"],"sources":["D:\\Diploma\\domains\\eduload.vue\\src\\Home.vue"],"sourcesContent":["<template>\r\n  <div style=\"display: flex\" class=\"reg\" v-if=\"isLoading\">Загрузка таблицы...</div>\r\n  <div class=\"table\" ><AGGrid\r\n      :gridData=\"gridData\"\r\n      :columnDefs=\"columnDefs\"\r\n      :defaultColDef=\"defaultColDef\"\r\n      :getRowId=\"getRowId\"\r\n      :localeText=\"ruLocale\"\r\n  ></AGGrid></div>\r\n</template>\r\n\r\n<script>\r\nimport AGGrid from \"@/components/AGGrid.vue\";\r\nimport infoCellRenderer from \"@/components/infoCellRenderer\";\r\nimport AG_GRID_LOCALE_RU from \"@/components/locale.ru.js\";\r\n\r\nexport default {\r\n  props: ['role'],\r\n  mounted() {\r\n    this.fetchJson();\r\n    this.ruLocale = AG_GRID_LOCALE_RU;\r\n  },\r\n  components: {\r\n    AGGrid,\r\n    infoCellRenderer\r\n  },\r\n  data() {\r\n    return {\r\n      isLoading: true,\r\n      gridData: [],\r\n      columnDefs: [\r\n        { headerName: \"\", field: \"tkey\", cellRenderer: \"infoCellRenderer\", width: 70},\r\n        { headerName: \"№\", valueGetter: params => {\r\n            return params.node ? params.node.rowIndex + 1 : null;\r\n          }, width: 60, },\r\n        { headerName: \"ФИО\", field: \"name\", width: 280, filter: true, floatingFilter: true,},\r\n        { headerName: \"Должность/Место работы\", field: \"infoWorkPlaces\", width: 280, filter: true, floatingFilter: true,},\r\n        { headerName: \"Ставка\", valueGetter: params => {\r\n            return params.data.stake;\r\n          },\r\n          valueSetter: params => {\r\n            let new_value = parseFloat(params.newValue).toFixed(2);\r\n            if (isNaN(new_value)) {\r\n              new_value = 0;\r\n            }\r\n            let url = 'http://212.193.88.196:8080/changestake?tkey=' + params.data.tkey + '&value=' + new_value;\r\n            fetch(url);\r\n            params.data.stake = new_value;\r\n            return true;\r\n          },  editable: this.isEditable(this.role), width: 100},\r\n        { headerName: \"Часы на ставку\",\r\n          valueGetter: params => {\r\n            return params.data.hoursOnStake;\r\n          },\r\n          valueSetter: params => {\r\n            let new_value = parseFloat(params.newValue).toFixed(2);\r\n            let url = 'http://212.193.88.196:8080/changehours?guidPerson1C=' + params.data.guidPerson1C + '&value=' + new_value;\r\n            fetch(url);\r\n            params.data.hoursOnStake = new_value;\r\n            params.data.hours = (params.data.bHoursPlaned - params.data.hoursOnStake).toFixed(2);\r\n            return true;\r\n          },\r\n          editable: this.isEditable(this.role), width: 100},\r\n        { headerName: \"Кол-во часов на почасовую оплату\",\r\n          valueGetter: params => {\r\n            return params.data.hours;\r\n          },\r\n          valueSetter: params => {\r\n            let new_value = parseFloat(params.newValue).toFixed(2);\r\n            params.data.hours = new_value;\r\n            return true;\r\n          }, width: 130},\r\n        {\r\n          headerName: 'Бюджет',\r\n          children: [\r\n            { headerName: \"Планируемое кол-во часов\", field: \"bHoursPlaned\", width: 140},\r\n            { headerName: \"Фактическое кол-во часов\", field: \"bHoursReal\", width: 140},\r\n            { headerName: \"Разница\", field: \"bHoursDiff\", width: 100},\r\n          ],\r\n        },\r\n        {\r\n          headerName: 'Контракт',\r\n          children: [\r\n            {headerName: \"Планируемое кол-во часов\", field: \"cHoursPlaned\", width: 140},\r\n            {headerName: \"Фактическое кол-во часов\", field: \"cHoursReal\", width: 140},\r\n            {headerName: \"Разница\", field: \"cHoursDiff\", width: 100},\r\n          ],\r\n        },\r\n        {\r\n          headerName: 'Общее',\r\n          children: [\r\n            { headerName: \"Планируемое кол-во часов\", field: \"hoursPlaned\", width: 140 },\r\n            { headerName: \"Фактическое кол-во часов\", field: \"hoursReal\", width: 140 },\r\n            { headerName: \"Разница\", field: \"hoursDiff\", width: 100 },\r\n          ],\r\n        },\r\n        { headerName: \"Год\", field: \"year\", width: 130, filter: true, floatingFilter: true,},\r\n      ],\r\n      defaultColDef: {\r\n        sortable: true,\r\n        resizable: true,\r\n        spanHeaderHeight: true,\r\n        wrapHeaderText: true,\r\n        minWidth: 50,\r\n        wrapText: true,\r\n        autoHeight: true,\r\n        autoHeaderHeight: true,\r\n      },\r\n    };\r\n  },\r\n  methods: {\r\n    async fetchJson() {\r\n      let json;\r\n      await fetch(\"http://212.193.88.196:8080/loaddata\")\r\n        .then((resp) => resp.text())\r\n        .then((razm) => (json = razm));\r\n      this.gridData = await JSON.parse(json);\r\n      this.isLoading = false;\r\n    },\r\n    isEditable(role) {\r\n      return role == 'admin' || role == 'write';\r\n    }\r\n  },\r\n};\r\n\r\n\r\n</script>\r\n\r\n<style scoped>\r\n\r\n.table {\r\n  margin: 20px;\r\n  display: flex;\r\n  height: 900px;\r\n  width: 2320px;\r\n}\r\n</style>\r\n"],"mappings":";;;;EACOA,KAAqB,EAArB;IAAA;EAAA,CAAqB;EAACC,KAAK,EAAC;;;EAC5BA,KAAK,EAAC;AAAO;;;6DAD2BC,KAAA,CAAAC,SAAS,I,cAAtDC,mBAAA,CAAiF,OAAjFC,UAAiF,EAAzB,qBAAmB,K,mCAC3EC,mBAAA,CAMgB,OANhBC,UAMgB,GANIC,YAAA,CAMVC,iBAAA;IALLC,QAAQ,EAAER,KAAA,CAAAQ,QAAQ;IAClBC,UAAU,EAAET,KAAA,CAAAS,UAAU;IACtBC,aAAa,EAAEV,KAAA,CAAAU,aAAa;IAC5BC,QAAQ,EAAEC,IAAA,CAAAD,QAAQ;IAClBE,UAAU,EAAED,IAAA,CAAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}