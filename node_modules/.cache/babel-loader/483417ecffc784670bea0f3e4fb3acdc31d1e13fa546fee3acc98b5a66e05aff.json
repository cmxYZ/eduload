{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-dfaff8e0\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"reg\"\n};\nconst _hoisted_2 = {\n  class: \"table\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_AGGrid = _resolveComponent(\"AGGrid\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"button\", {\n    class: \"reg-button\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.toMainPage && $options.toMainPage(...args)),\n    style: {\n      \"display\": \"flex\",\n      \"margin-top\": \"20px\"\n    }\n  }, \"Назад\"), _createElementVNode(\"div\", _hoisted_1, \"Преподаватель: \" + _toDisplayString(this.name), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_AGGrid, {\n    gridData: $data.gridData,\n    columnDefs: $data.columnDefs,\n    defaultColDef: $data.defaultColDef,\n    getRowId: _ctx.getRowId,\n    localeText: _ctx.ruLocale\n  }, null, 8 /* PROPS */, [\"gridData\", \"columnDefs\", \"defaultColDef\", \"getRowId\", \"localeText\"])])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementVNode","onClick","_cache","args","$options","toMainPage","style","_hoisted_1","_toDisplayString","name","_hoisted_2","_createVNode","_component_AGGrid","gridData","$data","columnDefs","defaultColDef","getRowId","_ctx","localeText","ruLocale"],"sources":["D:\\Diploma\\domains\\eduload.vue\\src\\Filtered.vue"],"sourcesContent":["<template>\r\n  <button class=\"reg-button\" @click=\"toMainPage\" style=\"display: flex; margin-top: 20px\">Назад</button>\r\n\r\n  <div class=\"reg\">Преподаватель: {{this.name}}</div>\r\n\r\n  <div class=\"table\" ><AGGrid\r\n      :gridData=\"gridData\"\r\n      :columnDefs=\"columnDefs\"\r\n      :defaultColDef=\"defaultColDef\"\r\n      :getRowId=\"getRowId\"\r\n      :localeText=\"ruLocale\"\r\n\r\n  ></AGGrid></div>\r\n</template>\r\n\r\n<script>\r\nimport AGGrid from \"@/components/AGGrid.vue\";\r\nimport AG_GRID_LOCALE_RU from \"@/components/locale.ru.js\";\r\n\r\nexport default {\r\n  mounted() {\r\n    this.fetchJson();\r\n    this.ruLocale = AG_GRID_LOCALE_RU;\r\n  },\r\n  components: {\r\n    AGGrid,\r\n  },\r\n  data() {\r\n    return {\r\n      name,\r\n      gridData: [],\r\n      columnDefs: [\r\n        { headerName: \"№\", valueGetter: 'node.id', width: 60, },\r\n        { headerName: \"Дисциплина\", field: \"disciplineName\", width: 300, filter: true, floatingFilter: true,},\r\n        { headerName: \"Академическая группа\", field: \"groupsHistory\", width: 160, filter: true, floatingFilter: true,},\r\n        { headerName: \"Семестр\", field: \"semester\",  width: 160, filter: true, floatingFilter: true,},\r\n        { headerName: \"Вид нагрузки\", field: \"loadType\", width: 195, filter: true, floatingFilter: true,},\r\n        { headerName: \"Формирующая кафедра\", field: \"formingDivisionuuid\", width: 300, filter: true, floatingFilter: true,},\r\n        { headerName: \"Читающая кафедра\", field: \"readingDivisionuuid\", width: 300, filter: true, floatingFilter: true,},\r\n        { headerName: \"Тип нагрузки\", field: \"compensationType\", width: 140, filter: true, floatingFilter: true,},\r\n        { headerName: \"Планируемое кол-во часов\", field: \"plannedHours\", width: 140,},\r\n        { headerName: \"Фактическое кол-во часов\", field: \"realHours\", editable: true, width: 140,},\r\n        { headerName: \"Разница\", field: \"diff\", width: 100},\r\n        { headerName: \"Почасовая оплата\", field: \"isHour\", width: 120, cellRenderer: params => {\r\n            if (params.value == 1) {\r\n              return '<div><input type=\"checkbox\" checked></div>';\r\n            }\r\n            else {\r\n              return '<div><input type=\"checkbox\"></div>';\r\n            }\r\n          },},\r\n      ],\r\n      defaultColDef: {\r\n        sortable: true,\r\n        resizable: true,\r\n        spanHeaderHeight: true,\r\n        wrapHeaderText: true,\r\n        minWidth: 100,\r\n        wrapText: true,\r\n        autoHeight: true,\r\n        autoHeaderHeight: true,\r\n      },\r\n    };\r\n  },\r\n  methods: {\r\n    toMainPage() {\r\n      window.location.href = '/';\r\n    },\r\n    async fetchJson() {\r\n      let json;\r\n      await fetch(\"http://212.193.88.196:8080/loaddatabytkey?tkey=\" + this.$route.query.tkey)\r\n          .then((resp) => resp.text())\r\n          .then((razm) => (json = razm));\r\n      let result = JSON.parse(json);\r\n      this.gridData = result[0];\r\n      this.name = result[1];\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n\r\n.table {\r\n  margin: 20px;\r\n  display: flex;\r\n  height: 850px;\r\n  width: 2180px;\r\n}\r\n</style>"],"mappings":";;;EAGOA,KAAK,EAAC;AAAK;;EAEXA,KAAK,EAAC;AAAO;;;6DAJlBC,mBAAA,CAAqG;IAA7FD,KAAK,EAAC,YAAY;IAAEE,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;IAAEG,KAAuC,EAAvC;MAAA;MAAA;IAAA;KAAwC,OAAK,GAE5FN,mBAAA,CAAmD,OAAnDO,UAAmD,EAAlC,iBAAe,GAAAC,gBAAA,MAAOC,IAAI,kBAE3CT,mBAAA,CAOgB,OAPhBU,UAOgB,GAPIC,YAAA,CAOVC,iBAAA;IANLC,QAAQ,EAAEC,KAAA,CAAAD,QAAQ;IAClBE,UAAU,EAAED,KAAA,CAAAC,UAAU;IACtBC,aAAa,EAAEF,KAAA,CAAAE,aAAa;IAC5BC,QAAQ,EAAEC,IAAA,CAAAD,QAAQ;IAClBE,UAAU,EAAED,IAAA,CAAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}