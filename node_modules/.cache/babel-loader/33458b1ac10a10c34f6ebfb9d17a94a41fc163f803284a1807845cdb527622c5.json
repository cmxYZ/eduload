{"ast":null,"code":"import { createApp } from 'vue';\nimport App from './App.vue';\ncreateApp(App).mount('#app');\nlet initOptions = {\n  url: 'http://127.0.0.1:8080/',\n  realm: 'keycloak-demo',\n  clientId: 'app-vue',\n  onLoad: 'login-required'\n};\nlet keycloak = Keycloak(initOptions);\nkeycloak.init({\n  onLoad: initOptions.onLoad\n}).then(auth => {\n  if (!auth) {\n    window.location.reload();\n  } else {\n    Vue.$log.info(\"Authenticated\");\n    new Vue({\n      el: '#app',\n      render: h => h(App, {\n        props: {\n          keycloak: keycloak\n        }\n      })\n    });\n  }\n\n  //Token Refresh\n  setInterval(() => {\n    keycloak.updateToken(70).then(refreshed => {\n      if (refreshed) {\n        Vue.$log.info('Token refreshed' + refreshed);\n      } else {\n        Vue.$log.warn('Token not refreshed, valid for ' + Math.round(keycloak.tokenParsed.exp + keycloak.timeSkew - new Date().getTime() / 1000) + ' seconds');\n      }\n    }).catch(() => {\n      Vue.$log.error('Failed to refresh token');\n    });\n  }, 6000);\n}).catch(() => {\n  Vue.$log.error(\"Authenticated Failed\");\n});","map":{"version":3,"names":["createApp","App","mount","initOptions","url","realm","clientId","onLoad","keycloak","Keycloak","init","then","auth","window","location","reload","Vue","$log","info","el","render","h","props","setInterval","updateToken","refreshed","warn","Math","round","tokenParsed","exp","timeSkew","Date","getTime","catch","error"],"sources":["D:/Diploma/domains/eduload.vue/src/main.js"],"sourcesContent":["import { createApp } from 'vue'\r\nimport App from './App.vue'\r\n\r\ncreateApp(App).mount('#app')\r\n\r\n\r\nlet initOptions = {\r\n    url: 'http://127.0.0.1:8080/', \r\n    realm: 'keycloak-demo', \r\n    clientId: 'app-vue', \r\n    onLoad: 'login-required'\r\n  }\r\n  \r\n  let keycloak = Keycloak(initOptions);\r\n  \r\n  keycloak.init({ onLoad: initOptions.onLoad }).then((auth) => {\r\n    if (!auth) {\r\n      window.location.reload();\r\n    } else {\r\n      Vue.$log.info(\"Authenticated\");\r\n  \r\n      new Vue({\r\n        el: '#app',\r\n        render: h => h(App, { props: { keycloak: keycloak } })\r\n      })\r\n    }\r\n  \r\n  \r\n  //Token Refresh\r\n    setInterval(() => {\r\n      keycloak.updateToken(70).then((refreshed) => {\r\n        if (refreshed) {\r\n          Vue.$log.info('Token refreshed' + refreshed);\r\n        } else {\r\n          Vue.$log.warn('Token not refreshed, valid for '\r\n            + Math.round(keycloak.tokenParsed.exp + keycloak.timeSkew - new Date().getTime() / 1000) + ' seconds');\r\n        }\r\n      }).catch(() => {\r\n        Vue.$log.error('Failed to refresh token');\r\n      });\r\n    }, 6000)\r\n  \r\n  }).catch(() => {\r\n    Vue.$log.error(\"Authenticated Failed\");\r\n  });"],"mappings":"AAAA,SAASA,SAAS,QAAQ,KAAK;AAC/B,OAAOC,GAAG,MAAM,WAAW;AAE3BD,SAAS,CAACC,GAAG,CAAC,CAACC,KAAK,CAAC,MAAM,CAAC;AAG5B,IAAIC,WAAW,GAAG;EACdC,GAAG,EAAE,wBAAwB;EAC7BC,KAAK,EAAE,eAAe;EACtBC,QAAQ,EAAE,SAAS;EACnBC,MAAM,EAAE;AACV,CAAC;AAED,IAAIC,QAAQ,GAAGC,QAAQ,CAACN,WAAW,CAAC;AAEpCK,QAAQ,CAACE,IAAI,CAAC;EAAEH,MAAM,EAAEJ,WAAW,CAACI;AAAO,CAAC,CAAC,CAACI,IAAI,CAAEC,IAAI,IAAK;EAC3D,IAAI,CAACA,IAAI,EAAE;IACTC,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;EAC1B,CAAC,MAAM;IACLC,GAAG,CAACC,IAAI,CAACC,IAAI,CAAC,eAAe,CAAC;IAE9B,IAAIF,GAAG,CAAC;MACNG,EAAE,EAAE,MAAM;MACVC,MAAM,EAAEC,CAAC,IAAIA,CAAC,CAACpB,GAAG,EAAE;QAAEqB,KAAK,EAAE;UAAEd,QAAQ,EAAEA;QAAS;MAAE,CAAC;IACvD,CAAC,CAAC;EACJ;;EAGF;EACEe,WAAW,CAAC,MAAM;IAChBf,QAAQ,CAACgB,WAAW,CAAC,EAAE,CAAC,CAACb,IAAI,CAAEc,SAAS,IAAK;MAC3C,IAAIA,SAAS,EAAE;QACbT,GAAG,CAACC,IAAI,CAACC,IAAI,CAAC,iBAAiB,GAAGO,SAAS,CAAC;MAC9C,CAAC,MAAM;QACLT,GAAG,CAACC,IAAI,CAACS,IAAI,CAAC,iCAAiC,GAC3CC,IAAI,CAACC,KAAK,CAACpB,QAAQ,CAACqB,WAAW,CAACC,GAAG,GAAGtB,QAAQ,CAACuB,QAAQ,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE,GAAG,IAAI,CAAC,GAAG,UAAU,CAAC;MAC1G;IACF,CAAC,CAAC,CAACC,KAAK,CAAC,MAAM;MACblB,GAAG,CAACC,IAAI,CAACkB,KAAK,CAAC,yBAAyB,CAAC;IAC3C,CAAC,CAAC;EACJ,CAAC,EAAE,IAAI,CAAC;AAEV,CAAC,CAAC,CAACD,KAAK,CAAC,MAAM;EACblB,GAAG,CAACC,IAAI,CAACkB,KAAK,CAAC,sBAAsB,CAAC;AACxC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}