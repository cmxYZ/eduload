{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-2380d2d8\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"table\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_AGGrid = _resolveComponent(\"AGGrid\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_AGGrid, {\n    gridData: $data.gridData,\n    columnDefs: $data.columnDefs,\n    defaultColDef: $data.defaultColDef,\n    getRowId: _ctx.getRowId\n  }, null, 8 /* PROPS */, [\"gridData\", \"columnDefs\", \"defaultColDef\", \"getRowId\"])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createVNode","_component_AGGrid","gridData","$data","columnDefs","defaultColDef","getRowId","_ctx"],"sources":["D:\\Diploma\\domains\\eduload.vue\\src\\Home.vue"],"sourcesContent":["<template>\r\n  <div class=\"table\" ><AGGrid\r\n      :gridData=\"gridData\"\r\n      :columnDefs=\"columnDefs\"\r\n      :defaultColDef=\"defaultColDef\"\r\n      :getRowId=\"getRowId\"\r\n  ></AGGrid></div>\r\n</template>\r\n\r\n<script>\r\nimport AGGrid from \"@/components/AGGrid.vue\";\r\nimport infoCellRenderer from \"@/components/infoCellRenderer\";\r\n\r\nexport default {\r\n  mounted() {\r\n    this.fetchJson();\r\n    this.getRowId = params => params.data.id;\r\n  },\r\n  components: {\r\n    AGGrid,\r\n    infoCellRenderer\r\n  },\r\n  data() {\r\n    return {\r\n      gridData: [],\r\n      columnDefs: [\r\n        { headerName: \"\", field: \"tkey\", cellRenderer: \"infoCellRenderer\", width: 90},\r\n        { headerName: \"№\", field: \"node.id\", width: 100, },\r\n        { headerName: \"ФИО\", field: \"name\", width: 280, filter: true, floatingFilter: true,},\r\n        { headerName: \"Должность/Место работы\", field: \"infoWorkPlaces\", width: 280, filter: true, floatingFilter: true,},\r\n        { headerName: \"Ставка\", field: \"stake\",  editable: true, width: 100},\r\n        { headerName: \"Часы на ставку\", field: \"hoursOnStake\", editable: true, width: 100},\r\n        { headerName: \"Кол-во часов на часовую оплату\", field: \"hours\", width: 130},\r\n        {\r\n          headerName: 'Бюджет',\r\n          children: [\r\n            { headerName: \"Планируемое кол-во часов\", field: \"bHoursPlaned\", width: 140},\r\n            { headerName: \"Фактическое кол-во часов\", field: \"bHoursReal\", editable: true, width: 140},\r\n            { headerName: \"Разница\", field: \"bHoursDiff\", width: 100},\r\n          ],\r\n        },\r\n        {\r\n          headerName: 'Контракт',\r\n          children: [\r\n            {headerName: \"Планируемое кол-во часов\", field: \"cHoursPlaned\", width: 140},\r\n            {headerName: \"Фактическое кол-во часов\", field: \"cHoursReal\", width: 140},\r\n            {headerName: \"Разница\", field: \"cHoursDiff\", width: 100},\r\n          ],\r\n        },\r\n        {\r\n          headerName: 'Общее',\r\n          children: [\r\n            {headerName: \"Планируемое кол-во часов\", field: \"hoursPlaned\", width: 140},\r\n            {headerName: \"Фактическое кол-во часов\", field: \"hoursReal\", width: 140},\r\n            {headerName: \"Разница\", field: \"hoursDiff\", width: 100},\r\n          ],\r\n        },\r\n        { headerName: \"Год\", field: \"year\", width: 150, filter: true, floatingFilter: true,},\r\n      ],\r\n      defaultColDef: {\r\n        sortable: true,\r\n        resizable: true,\r\n        spanHeaderHeight: true,\r\n        wrapHeaderText: true,\r\n        minWidth: 90,\r\n        wrapText: true,\r\n        autoHeight: true,\r\n        autoHeaderHeight: true,\r\n      },\r\n    };\r\n  },\r\n  methods: {\r\n    async fetchJson() {\r\n      let json;\r\n      await fetch(\"http://212.193.88.196:8080/loaddata\")\r\n        .then((resp) => resp.text())\r\n        .then((razm) => (json = razm));\r\n      this.gridData = JSON.parse(json);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.reg {\r\n  display: flex;\r\n  margin-top: 15px;\r\n  margin-left: 15px;\r\n  font-size: 20px;\r\n}\r\n.table {\r\n  margin: 20px;\r\n  display: flex;\r\n  height: 900px;\r\n  width: 2300px;\r\n}\r\n</style>\r\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAO;;;uBAAlBC,mBAAA,CAKgB,OALhBC,UAKgB,GALIC,YAAA,CAKVC,iBAAA;IAJLC,QAAQ,EAAEC,KAAA,CAAAD,QAAQ;IAClBE,UAAU,EAAED,KAAA,CAAAC,UAAU;IACtBC,aAAa,EAAEF,KAAA,CAAAE,aAAa;IAC5BC,QAAQ,EAAEC,IAAA,CAAAD"},"metadata":{},"sourceType":"module","externalDependencies":[]}